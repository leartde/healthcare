// <auto-generated />
using System;
using HealthcareApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HealthcareApi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251010165804_PredictionEntityChange")]
    partial class PredictionEntityChange
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HealthcareApi.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("HealthcareApi.Models.ClinicalRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChestPainType")
                        .HasColumnType("int");

                    b.Property<int>("CholesterolTotal")
                        .HasColumnType("int");

                    b.Property<bool>("ExerciseInducedAngina")
                        .HasColumnType("bit");

                    b.Property<bool>("FastingBloodSugar")
                        .HasColumnType("bit");

                    b.Property<int>("MajorVesselsColored")
                        .HasColumnType("int");

                    b.Property<int>("MaximumHeartRate")
                        .HasColumnType("int");

                    b.Property<double>("OldPeak")
                        .HasColumnType("float");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("RecordedByDoctorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RecordedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RestEcg")
                        .HasColumnType("int");

                    b.Property<int>("RestingBloodPressure")
                        .HasColumnType("int");

                    b.Property<int>("Slope")
                        .HasColumnType("int");

                    b.Property<int>("Thalassemia")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("RecordedByDoctorId");

                    b.ToTable("ClinicalRecords");
                });

            modelBuilder.Entity("HealthcareApi.Models.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("HealthcareApi.Models.HeartDiseasePrediction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClinicalRecordId")
                        .HasColumnType("int");

                    b.Property<bool>("Label")
                        .HasColumnType("bit");

                    b.Property<double>("Probability")
                        .HasColumnType("float");

                    b.Property<int>("RecordId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClinicalRecordId");

                    b.ToTable("HeartDiseasePredictions");
                });

            modelBuilder.Entity("HealthcareApi.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sex")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("HealthcareApi.Models.Appointment", b =>
                {
                    b.HasOne("HealthcareApi.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthcareApi.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HealthcareApi.Models.ClinicalRecord", b =>
                {
                    b.HasOne("HealthcareApi.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthcareApi.Models.Doctor", "RecordedByDoctor")
                        .WithMany()
                        .HasForeignKey("RecordedByDoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("RecordedByDoctor");
                });

            modelBuilder.Entity("HealthcareApi.Models.HeartDiseasePrediction", b =>
                {
                    b.HasOne("HealthcareApi.Models.ClinicalRecord", "ClinicalRecord")
                        .WithMany()
                        .HasForeignKey("ClinicalRecordId");

                    b.Navigation("ClinicalRecord");
                });
#pragma warning restore 612, 618
        }
    }
}
